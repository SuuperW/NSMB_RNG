<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <SpaProxyServerUrl>https://localhost:44462</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
    <Configurations>Debug;Release;AzureRelease</Configurations>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Identity" Version="1.10.4" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="6.0.23" />
    <PackageReference Include="Microsoft.Azure.Cosmos" Version="3.37.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\NSMB_RNG\NSMB_RNG.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    <!-- Don't publish config files, but do show them. Config files are for testing only. -->
    <Content Remove="config.*.json" />
    <None Include="config.*.json" />
    <!-- If this exists, remove it. We'll conditionally delete the file or re-include it later. -->
    <Content Remove="config.json" />
  </ItemGroup>
  <PropertyGroup>
    <SourceConfig>config.$(Configuration).json</SourceConfig>
  </PropertyGroup>

    <!-- Copy and rename the config file for current configuration. -->
  <Target Name="CopyConfig" BeforeTargets="BeforeBuild" Condition="Exists($(SourceConfig))">
    <Copy SourceFiles="$(SourceConfig)" DestinationFiles="config.json" SkipUnchangedFiles="true" />
    <!-- Include the copied file in the build output. -->
    <ItemGroup>
      <Content Include="config.json" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
  <Target Name="DeleteOldConfig" BeforeTargets="BeforeBuild" Condition="!Exists($(SourceConfig))">
    <Delete Files="config.json" />
  </Target>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'pnpm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
  </Target>
  
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm run build --configuration production" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>
